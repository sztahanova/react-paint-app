{"version":3,"sources":["components/NameComponent.js","components/ColorPickerComponent.js","components/WindowSize.js","components/CanvasComponent.js","components/RefreshButtonComponent.js","components/SizePickerComponent.js","components/InfoButtonComponent.js","components/PaintComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Name","React","memo","useState","name","setName","className","value","onChange","event","target","onClick","setSelectionRange","length","placeholder","ColorPicker","colors","activeColor","setActiveColor","map","color","i","type","checked","style","background","useWindowSize","cb","window","innerWidth","innerHeight","windowWidth","windowHeight","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","Canvas","props","drawing","setDrawing","width","setWidth","height","setHeight","canvasRef","useRef","ctx","inMemCanvasRef","document","createElement","inMemCtx","current","getContext","fillStyle","fillRect","drawImage","drawLine","posX","posY","coords","offsetLeft","offsetTop","lineTo","stroke","handleMouseMove","startDrawing","lineJoin","lineCap","lineWidth","strokeStyle","beginPath","console","log","moveTo","stopDrawing","closePath","Fragment","ref","onMouseDown","clientX","clientY","onMouseUp","onMouseOut","onMouseMove","onTouchStart","e","touch","touches","onTouchEnd","onTouchMove","RefreshButton","SizePicker","sizes","activeSize","setActiveSize","size","borderWidth","borderStyle","borderColor","InfoButton","alert","Paint","setColors","windowSizeVisible","setWindowSizeVisible","clearTimeout","timeoutId","setTimeout","headerRef","offsetHeight","getColors","useCallback","baseColor","randomColor","slice","fetch","then","res","json","hex","borderTop","marginTop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.edcd012c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Name = React.memo(() => {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  return (\r\n    <label className=\"header-name\">\r\n      <input\r\n        value={name}\r\n        onChange={(event) => setName(event.target.value)}\r\n        onClick={(event) =>\r\n          event.target.setSelectionRange(0, event.target.value.length)\r\n        }\r\n        placeholder=\"Untitled\"\r\n      />\r\n    </label>\r\n  );\r\n});\r\n\r\nexport default Name;\r\n","import React from \"react\";\r\n\r\nconst ColorPicker = ({ colors = [], activeColor, setActiveColor }) => {\r\n  if (!colors.length) return null;\r\n\r\n  return (\r\n    <fieldset className=\"color-picker\">\r\n      {colors.map((color, i) => (\r\n        <label key={i}>\r\n          <input\r\n            name=\"color\"\r\n            type=\"radio\"\r\n            value={color}\r\n            checked={activeColor === color}\r\n            onChange={() => setActiveColor(color)}\r\n          />\r\n          <span style={{ background: color }} />\r\n        </label>\r\n      ))}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;","import React, { useEffect, useState } from \"react\";\r\n\r\nconst useWindowSize = (cb) => {\r\n  const [[windowWidth, windowHeight], setWindowSize] = useState([\r\n    window.innerWidth,\r\n    window.innerHeight,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      cb();\r\n      setWindowSize([window.innerWidth, window.innerHeight]);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return [windowWidth, windowHeight];\r\n};\r\n\r\nexport default useWindowSize;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport useWindowSize from \"./WindowSize\";\r\n\r\nconst Canvas = (props) => {\r\n  const [drawing, setDrawing] = useState(false);\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const [height, setHeight] = useState(window.innerHeight);\r\n\r\n  const canvasRef = useRef();\r\n  const ctx = useRef();\r\n\r\n  // needed to persist drawing on resize\r\n  const inMemCanvasRef = useRef(document.createElement(\"canvas\"));\r\n  const inMemCtx = useRef();\r\n\r\n  useEffect(() => {\r\n    ctx.current = canvasRef.current.getContext(\"2d\");\r\n    inMemCtx.current = inMemCanvasRef.current.getContext(\"2d\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    ctx.current.fillStyle = \"#ffffff\";\r\n    ctx.current.fillRect(0, 0, width, height);\r\n    ctx.current.drawImage(inMemCanvasRef.current, 0, 0);\r\n  }, [width, height]);\r\n\r\n  useWindowSize(() => {\r\n    setWidth(window.innerWidth);\r\n    setHeight(window.innerHeight);\r\n  });\r\n\r\n  const handleMouseMove = (event) => {\r\n    drawLine(event.clientX, event.clientY);\r\n  };\r\n\r\n  function drawLine(posX, posY) {\r\n    // actual coordinates\r\n    const coords = [\r\n      posX - canvasRef.current.offsetLeft,\r\n      posY - canvasRef.current.offsetTop,\r\n    ];\r\n\r\n    if (drawing) {\r\n      ctx.current.lineTo(...coords);\r\n      ctx.current.stroke();\r\n    }\r\n\r\n    if (props.handleMouseMove) {\r\n      props.handleMouseMove(...coords);\r\n    }\r\n  }\r\n\r\n  function startDrawing(posX, posY) {\r\n    ctx.current.lineJoin = \"round\";\r\n    ctx.current.lineCap = \"round\";\r\n    ctx.current.lineWidth = props.lineWidth;\r\n    ctx.current.strokeStyle = props.color;\r\n    ctx.current.beginPath();\r\n\r\n    console.log(posX, posY);\r\n\r\n    // actual coordinates\r\n    ctx.current.moveTo(\r\n      posX - canvasRef.current.offsetLeft,\r\n      posY - canvasRef.current.offsetTop\r\n    );\r\n\r\n    setDrawing(true);\r\n  }\r\n\r\n  const handleMouseDown = (event) => {\r\n    startDrawing(event.clientX, event.clientY);\r\n  };\r\n\r\n  const stopDrawing = () => {\r\n    ctx.current.closePath();\r\n    setDrawing(false);\r\n\r\n    inMemCanvasRef.current.width = canvasRef.current.width;\r\n    inMemCanvasRef.current.height = canvasRef.current.height;\r\n    inMemCtx.current.drawImage(canvasRef.current, 0, 0);\r\n  };\r\n\r\n  const handleTouchStart = (e) => {\r\n    const touch = e.touches[0];\r\n    startDrawing(touch.clientX, touch.clientY);\r\n  };\r\n\r\n  const handleTouchMove = (e) => {\r\n    const touch = e.touches[0];\r\n    drawLine(touch.clientX, touch.clientY);\r\n  };\r\n\r\n  const handleTouchEnd = (e) => {\r\n    stopDrawing();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={props.width || width}\r\n        height={props.height || height}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseUp={stopDrawing}\r\n        onMouseOut={stopDrawing}\r\n        onMouseMove={handleMouseMove}\r\n        onTouchStart={handleTouchStart}\r\n        onTouchEnd={handleTouchEnd}\r\n        onTouchMove={handleTouchMove}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\n\r\nconst RefreshButton = React.memo(({ cb }) => {\r\n  return (\r\n    <button className=\"button-refresh-colors\" onClick={cb}>\r\n      &#8634;\r\n    </button>\r\n  );\r\n});\r\n\r\nexport default RefreshButton;\r\n","import React from \"react\";\r\n\r\nconst SizePicker = ({ sizes, activeSize, setActiveSize, activeColor }) => {\r\n  return (\r\n    <fieldset className=\"size-picker\">\r\n      {sizes.map((size, i) => (\r\n        <label key={i}>\r\n          <input\r\n            name=\"size\"\r\n            type=\"radio\"\r\n            value={size}\r\n            checked={activeSize === size}\r\n            onChange={() => setActiveSize(size)}\r\n          />\r\n          <span\r\n            style={{\r\n              height: size,\r\n              width: size,\r\n              borderWidth: activeSize === size ? 3 : 2,\r\n              borderStyle: \"solid\",\r\n              borderColor: activeSize === size ? activeColor : \"black\",\r\n            }}\r\n          />\r\n        </label>\r\n      ))}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default SizePicker;\r\n","import React from \"react\";\r\n\r\nconst InfoButton = () => {\r\n  return (\r\n    <button\r\n      className=\"button-info\"\r\n      onClick={() =>\r\n        alert(\r\n          \"Choose the color of your preference by clicking on the colored boxes.\\nChange base color by clicking on the refresh button on the right side.\\nChoose the desired line width by clicking on one of the circles.\\nRight click on the drawing and click Save Image As... to download your work as a PNG file.\\n\\nHave fun!\"\r\n        )\r\n      }\r\n    >\r\n      &#9432; How to use\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default InfoButton;\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport randomColor from \"randomcolor\";\r\nimport Name from \"./NameComponent\";\r\nimport ColorPicker from \"./ColorPickerComponent\";\r\nimport Canvas from \"./CanvasComponent\";\r\nimport RefreshButton from \"./RefreshButtonComponent\";\r\nimport useWindowSize from \"./WindowSize\";\r\nimport SizePicker from \"./SizePickerComponent\";\r\nimport InfoButton from \"./InfoButtonComponent\";\r\n\r\nconst sizes = [2, 6, 10, 14, 20];\r\n\r\nconst Paint = () => {\r\n  const [colors, setColors] = useState([]);\r\n  const [activeColor, setActiveColor] = useState();\r\n  const [activeSize, setActiveSize] = useState(sizes[0]);\r\n  const [windowSizeVisible, setWindowSizeVisible] = useState(false);\r\n\r\n  const [windowWidth, windowHeight] = useWindowSize(() => {\r\n    setWindowSizeVisible(true);\r\n    clearTimeout(timeoutId);\r\n    timeoutId.current = setTimeout(() => setWindowSizeVisible(false), 500);\r\n  });\r\n\r\n  const headerRef = useRef({ offsetHeight: 0 });\r\n  const timeoutId = useRef();\r\n\r\n  useEffect(() => getColors(), []);\r\n\r\n  const getColors = useCallback(() => {\r\n    const baseColor = randomColor().slice(1);\r\n    fetch(`https://www.thecolorapi.com/scheme?hex=${baseColor}&mode=monochrome`)\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setColors(res.colors.map((color) => color.hex.value));\r\n        setActiveColor(res.colors[0].hex.value);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <header\r\n        ref={headerRef}\r\n        style={{\r\n          borderTop: `20px solid ${activeColor}`,\r\n        }}\r\n      >\r\n        <div>\r\n          <Name />\r\n          <InfoButton />\r\n        </div>\r\n        <div style={{ marginTop: 10 }}>\r\n          <ColorPicker\r\n            colors={colors}\r\n            activeColor={activeColor}\r\n            setActiveColor={setActiveColor}\r\n          />\r\n          <SizePicker\r\n            sizes={sizes}\r\n            activeSize={activeSize}\r\n            setActiveSize={setActiveSize}\r\n            activeColor={activeColor}\r\n          />\r\n          <RefreshButton cb={getColors} />\r\n        </div>\r\n      </header>\r\n      {activeColor && activeSize && (\r\n        <Canvas\r\n          color={activeColor}\r\n          lineWidth={activeSize}\r\n          height={window.innerHeight - headerRef.current.offsetHeight}\r\n        />\r\n      )}\r\n      <div className={`window-size ${windowSizeVisible ? \"\" : \"hidden\"}`}>\r\n        {windowWidth} x {windowHeight}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paint;\r\n","import \"./App.css\";\r\nimport Paint from \"./components/PaintComponent\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Paint />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}